import cv2
import numpy as np
from ultralytics import YOLO

# Load YOLOv8 model
def load_yolo_model():
    # Load YOLOv8 model from the pretrained weights
    model = YOLO('yolov8n.pt')  # You can change 'yolov8n.pt' to another version (e.g., 'yolov8s.pt')
    return model

# Object detection function using YOLOv8
def detect_objects(frame, model):
    results = model(frame)
    detected_objects = []

    for result in results:
        for obj in result.boxes:
            # Extract class ID and bounding box
            class_id = int(obj.cls[0])
            box = obj.xyxy[0].cpu().numpy()  # Extract bounding box coordinates

            # Append bounding box and class ID to detected objects
            detected_objects.append((box, class_id))
    
    return detected_objects

# Traffic light color detection function
def detect_traffic_light_color(frame):
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Define HSV color ranges for red, yellow, and green
    red_lower1 = np.array([0, 100, 100])
    red_upper1 = np.array([10, 255, 255])
    red_lower2 = np.array([160, 100, 100])
    red_upper2 = np.array([180, 255, 255])

    yellow_lower = np.array([20, 100, 100])
    yellow_upper = np.array([30, 255, 255])

    green_lower = np.array([40, 100, 100])
    green_upper = np.array([90, 255, 255])

    # Create masks for the colors
    red_mask1 = cv2.inRange(hsv, red_lower1, red_upper1)
    red_mask2 = cv2.inRange(hsv, red_lower2, red_upper2)
    red_mask = red_mask1 + red_mask2

    yellow_mask = cv2.inRange(hsv, yellow_lower, yellow_upper)
    green_mask = cv2.inRange(hsv, green_lower, green_upper)

    # Find the largest color area (contour) for each color mask
    red_area = np.sum(red_mask)
    yellow_area = np.sum(yellow_mask)
    green_area = np.sum(green_mask)

    # Determine the traffic light color based on the largest area
    if red_area > yellow_area and red_area > green_area:
        return 'red'
    elif yellow_area > red_area and yellow_area > green_area:
        return 'yellow'
    elif green_area > red_area and green_area > yellow_area:
        return 'green'
    else:
        return 'unknown'

# Traffic light control function
def control_traffic_light(detected_objects, traffic_light_color, model):
    # Class IDs of vehicle objects (e.g., car, bus, motorcycle)
    vehicle_class_ids = [2, 5, 3]  # Class IDs for car, bus, motorcycle
    vehicles = [obj for obj in detected_objects if obj[1] in vehicle_class_ids]

    # Assume crosswalk is a certain class, e.g., class ID 11 (for example purposes, adjust based on actual data)
    crosswalk_class_id = 11  # You need to replace this with the actual class ID for a crosswalk if available

    # Check if crosswalk is detected
    for obj in detected_objects:
        if obj[1] == crosswalk_class_id:
            print("Detected crosswalk")
            break

    if traffic_light_color == 'red':
        print("Red light detected. Stop traffic.")
    elif traffic_light_color == 'green':
        if len(vehicles) <= 6:
            print("Green pedestrian light. Allow crossing.")
        else:
            print("Heavy traffic detected, continue traffic flow.")
    elif traffic_light_color == 'yellow':
        print("Yellow light detected. Prepare to stop.")

# Open video file
cap = cv2.VideoCapture('traffic_video.mp4')

# Ensure video file is opened successfully
if not cap.isOpened():
    print("Error: Could not open video file.")
    exit()

# Get total frames in the video
total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

# Load YOLOv8 model
model = load_yolo_model()

# Initialize previous traffic light color
previous_traffic_light_color = None

# Continuously read frames from the video
while cap.isOpened():
    ret, frame = cap.read()  # Read a frame from the video

    # Break the loop if no frame is captured (end of video)
    if not ret or frame is None:
        print("End of video or error in reading frame.")
        break

    # Get the current frame number
    current_frame = int(cap.get(cv2.CAP_PROP_POS_FRAMES))

    # If the current frame is the last frame, exit the loop
    if current_frame >= total_frames:
        print("Reached the end of the video.")
        break

    # Detect traffic light color
    traffic_light_color = detect_traffic_light_color(frame)

    # Check if traffic light color has changed
    if traffic_light_color != previous_traffic_light_color:
        print(f"Traffic light color changed to: {traffic_light_color}")
        previous_traffic_light_color = traffic_light_color  # Update the last detected color

    # Object detection
    detected_objects = detect_objects(frame, model)

    # Print class ID and name of detected objects
    for obj in detected_objects:
        class_id = obj[1]
        print(f"Detected object class: {class_id}")

    # Call the traffic light control function
    control_traffic_light(detected_objects, traffic_light_color, model)

# Release video capture object and close windows
cap.release()
cv2.destroyAllWindows()
